The '100-matrix_mul' test module
=================================
Using 'matrix_mul' function
----------------------------
First import module:
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul


Test case (no args):
---------------------
>>> matrix_mul()
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


Test case (one arg):
---------------------
>>> matrix_mul([[5, 6], [1, 3]])
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'


Test case (two valid args):
----------------------------
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]


Test case (floats):
--------------------
>>> matrix_mul([[1.5, -2.5]], [[5.8, 1.0], [-10.6, -3]])
[[35.2, 9.0]]


Test case (row count in one != column count in the other):
----------------------------------------------------------
>>> matrix_mul([[1, 2], [3, 4]], [[6, 7], [8, 9], [10, 11]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied


Test case (Empty matrices):
----------------------------
>>> matrix_mul([], [[1, 2]])
Traceback (most recent call last):
...
ValueError: m_b can't be empty

>>> matrix_mul([], [])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2]], [])
Traceback (most recent call last):
...
ValueError: m_a can't be empty


Test case (invalid args):
--------------------------
>>> matrix_mul("Hello", [[1, 2]])
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> matrix_mul([[1, 2]], "Hello")
Traceback (most recent call last):
...
TypeError: m_b must be a list

>>> matrix_mul("HELLO", "There")
Traceback (most recent call last):
...
TypeError: m_b must be a list

>>> matrix_mul(None, None)
Traceback (most recent call last):
...
TypeError: m_b must be a list


Test case (Not list of lists):
------------------------------
>>> matrix_mul([1, 2], [[3, 4]])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

>>> matrix_mul([[1, 2]], [3, 4])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists

>>> matrix_mul([1, 2], [3, 4])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists


Test case (non int/floats elements):
-------------------------------------
>>> matrix_mul([[1, "not int"]], [["not float", 3.5]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, {}]], [[4, 5]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, 2]], [[3.5, "Hello"]])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats


Test case (different row length):
---------------------------------
>>> matrix_mul([[1], [2, 3]], [[4, 5], [6, 7]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2], [3, 4]], [[5], [6, 7]])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[1, 2], [3, 4]], [[5, 6, 7], [8, 9]])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size
